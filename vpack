#!/usr/bin/python3
import sys,os,subprocess
import shutil
import re
import json

import urllib.error
import urllib.request

home=os.path.expanduser('~')
if os.name=='nt':
    vimhome=os.path.join(home, 'vimfiles')
else:
    vimhome=os.path.join(home,'.vim')
packoptdir=os.path.join(vimhome, 'pack','vpack','opt')
packstartdir=os.path.join(vimhome, 'pack','vpack','start')

def helper():
    print('''
Usage: vpack COMMAND [options] [pack]

Commands:
    list       list packages
    search     search package via vimawesome.com
    install    install packages from remote repos
    remove     remove packages 
    start      move packages to start
    opt        move packages to opt
    helptags   generate helptags for all packages
Example:
    vpack search ale
    vpack install w0rp/ale
    vpack list
    vpack opt ale
    vpack install -f a.vim
''')

def vimescape(s):
    """
    Escape filename for the shell.
    """
    if os.name == "nt":
        return '"' + s.replace("\\\\", "/") + '"'
    else:
        return s.replace(" ", r"\ ")

def helptags():
    for a in os.listdir(packstartdir):
        docdir=os.path.join(packstartdir, a, 'doc')
        os.system('vim -nEs -c "silent! helptags %s | q"' % vimescape(docdir))
    for a in os.listdir(packoptdir):
        docdir=os.path.join(packoptdir, a, 'doc')
        os.system('vim -nEs -c "silent! helptags %s | q"' % vimescape(docdir))

def opt(*argv):
    plug = argv[0]
    os.rename(os.path.join(packstartdir, plug), os.path.join(packoptdir, plug))

def start(*argv):
    plug = argv[0]
    os.rename(os.path.join(packoptdir, plug), os.path.join(packstartdir, plug))

def search(plug):
    url='https://vimawesome.com/api/plugins?query=%s' % plug
    try:
        print("DEBUG: ", url)
        req=urllib.request.Request(url, headers={"User-Agent": "Mozilla/5.0"})
        response = urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        print("http error: ", e)
    j=json.loads(response.read().decode('utf-8'))
    for pl in j['plugins'][:5]:
        print(pl['github_owner']+'/'+pl['name'])
        print('\t stars:', pl['github_stars'])
        print('\t',pl['github_url'])
        print('\t',pl['short_desc'])

def escape(path):
    if os.name=='nt':
        return path.replace("\\", "\\\\")
    return path

def list(*_):
    l=len('https://github.com/')
    cwd=os.getcwd()
    if not os.path.exists(packstartdir):
        return
    for a in os.listdir(packstartdir):
        os.chdir(os.path.join(packstartdir, a))
        plug =os.popen('git remote get-url --push origin').read()
        print(plug.strip()[l:])

    if not os.path.exists(packoptdir):
        return
    os.chdir(packoptdir)
    for a in os.listdir(packoptdir):
        os.chdir(os.path.join(packoptdir, a))
        plug=os.popen('cd %s; git remote get-url --push origin' % os.path.join(packoptdir, a)).read()
        print(plug.strip()[l:], '(opt)')
    os.chdir(cwd)

def handle_file(file):
    if os.path.exists(file):
        plugs=[]
        with open(file, encoding='utf-8') as file:
            for line in file.readlines(): 
                m=re.match('"pack (.*/.*)', line)
                if m:
                    plugs.append(m.group(1))
    for plug in plugs:
        print(plug)
        install(plug)

def install(*argv):
    if not (len(argv)==1 and re.match('.*/.*', argv[0])):
        if argv[0]=='-f' and len(argv)==2 and os.path.exists(argv[1]):
            handle_file(argv[1])
        else:
            helper()
        return
                
    plug=argv[0]
    assert(re.match('.*/.*', plug))
    target=os.path.join(packoptdir, plug.split('/')[1]) 
    if os.path.exists(target):
        print("Plugin already exists in ", taget)
        return 
    
    target=os.path.join(packstartdir, plug.split('/')[1]) 
    if os.path.exists(target):
        print("Plugin already exists in ", target)
        return

    os.system('git clone --depth=1 https://github.com/%s %s' % (plug, os.path.join(packstartdir, plug.split('/')[1])))
    
def remove(plug):
    if os.path.exists(os.path.join(packstartdir, plug)):
        shutil.rmtree(os.path.join(packstartdir, plug))
    else:
        shutil.rmdir(os.path.join(packoptdir, plug))

def main(action, *argv):
    if action in ['helptags', 'list', 'install', 'remove', 'start', 'opt', 'search']:
        globals()[action](*argv)
    else:
        helper()

if __name__=='__main__':
    if len(sys.argv)==1:
        helper()
    else:
        main(*(sys.argv[1:]))
