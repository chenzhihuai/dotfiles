#!/usr/bin/python3
import sys,os,subprocess
import shutil
import re
import json
import argparse

import urllib.error
import urllib.request

home=os.path.expanduser('~')
if os.name=='nt':
    vimhome=os.path.join(home, 'vimfiles')
else:
    vimhome=os.path.join(home,'.vim')
packoptdir=os.path.join(vimhome, 'pack','vpack','opt')
packstartdir=os.path.join(vimhome, 'pack','vpack','start')

def helper():
    print('''
Usage: vpack COMMAND [options] [pack]

Commands:
    list       list packages
    search     search package via vimawesome.com
    install    install packages from remote repos
    remove     remove packages 
    start      move packages to start
    opt        move packages to opt
    helptags   generate helptags for all packages
Example:
    vpack search ale
    vpack install w0rp/ale
    vpack list
    vpack opt ale
    vpack install -f a.vim
''')

def vimescape(s):
    """
    Escape filename for the shell.
    """
    if os.name == "nt":
        return '"' + s.replace("\\\\", "/") + '"'
    else:
        return s.replace(" ", r"\ ")

def helptags():
    for a in os.listdir(packstartdir):
        docdir=os.path.join(packstartdir, a, 'doc')
        os.system('vim -nEs -c "silent! helptags %s | q"' % vimescape(docdir))
    for a in os.listdir(packoptdir):
        docdir=os.path.join(packoptdir, a, 'doc')
        os.system('vim -nEs -c "silent! helptags %s | q"' % vimescape(docdir))

def opt(*argv):
    plug = argv[0]
    os.rename(os.path.join(packstartdir, plug), os.path.join(packoptdir, plug))

def start(*argv):
    plug = argv[0]
    os.rename(os.path.join(packoptdir, plug), os.path.join(packstartdir, plug))

def search(plug):
    url='https://vimawesome.com/api/plugins?query=%s' % plug
    try:
        print("DEBUG: ", url)
        req=urllib.request.Request(url, headers={"User-Agent": "Mozilla/5.0"})
        response = urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        print("http error: ", e)
    j=json.loads(response.read().decode('utf-8'))
    for pl in j['plugins'][:5]:
        print(pl['github_owner']+'/'+pl['name'])
        print('\t stars:', pl['github_stars'])
        print('\t',pl['github_url'])
        print('\t',pl['short_desc'])

def escape(path):
    if os.name=='nt':
        return path.replace("\\", "\\\\")
    return path

def list(*_):
    l=len('https://github.com/')
    cwd=os.getcwd()
    if not os.path.exists(packstartdir):
        return
    print("====== start ======")
    for a in os.listdir(packstartdir):
        os.chdir(os.path.join(packstartdir,a))
        plug=os.popen('git remote get-url --push origin').read()
        print(plug.strip()[l:])

    if not os.path.exists(packoptdir):
        return
    os.chdir(packoptdir)
    print("\n====== opt ======")
    for a in os.listdir(packoptdir):
        os.chdir(os.path.join(packoptdir, a))
        plug=os.popen('git remote get-url --push origin').read()
        print(plug.strip()[l:])
    os.chdir(cwd)

def handle_file(file):
    pattern='(.*/.*)' if file.endswith('.txt') else '"pack (.*/.*)'
    plugs=[]
    if os.path.exists(file):
        with open(file, encoding='utf-8') as file:
            for line in file.readlines(): 
                m=re.match(pattern, line)
                if m:
                    plugs.append(m.group(1))
    return plugs

def install(*argv):
    parser = argparse.ArgumentParser(
            prog='vpack install',
            description='install vim plug')
    parser.add_argument('plugs', nargs='*')    
    parser.add_argument('-f', '--fromfile', help='specify a file lists plugins')
    parser.add_argument('-d', '--dir', default=packstartdir, help='directory to be installed, can be `start`,`opt` or any specified path')  
    args = parser.parse_args(argv)
    if args.fromfile:
        args.plugs+=handle_file(args.fromfile)
    if args.dir=='start':
        args.dir=packstartdir
    if args.dir=='opt':
        args.dir=packoptdir
    for plug in args.plugs:
        if not re.match('.*/.*', plug):
            print("SKIP %s, since it dosen't look like a plugin"%plug)
            continue
        if args.dir in [packoptdir, packstartdir]:
            plugdir1=os.path.join(packoptdir, plug.split('/')[1])
            plugdir2=os.path.join(packstartdir, plug.split('/')[1])
            if os.path.exists(plugdir1) or os.path.exists(plugdir2):
                plugdir=plugdir1 if os.path.exists(plugdir1) else plugdir2
                print("Plugin %s already exists in " % plug, plugdir)
                continue

        plugdir=os.path.join(args.dir, plug.split('/')[1]) 
        if os.path.exists(plugdir):
            print("Plugin %s already exists in " % plug, plugdir)
            continue
    
        os.system('git clone --depth=1 https://github.com/%s %s' % (plug, plugdir))
    
def remove(plug):
    if os.path.exists(os.path.join(packstartdir, plug)):
        shutil.rmtree(os.path.join(packstartdir, plug))
    else:
        shutil.rmtree(os.path.join(packoptdir, plug))

def main(action, *argv):
    if action in ['helptags', 'list', 'install', 'remove', 'start', 'opt', 'search']:
        globals()[action](*argv)
    else:
        helper()

if __name__=='__main__':
    if len(sys.argv)==1:
        helper()
    else:
        main(*(sys.argv[1:]))
