#!/usr/bin/python3
import sys,os,subprocess
import shutil
import re
import json
import argparse

import urllib.error
import urllib.request

home=os.path.expanduser('~')
vimexe='vim'
if os.name=='nt':
    vimhome=os.path.join(home, 'vimfiles')
else:
    vimhome=os.path.join(home,'.vim')
packoptdir=os.path.join(vimhome, 'pack','vpack','opt')
packstartdir=os.path.join(vimhome, 'pack','vpack','start')

def helper():
    print('''
Usage: vpack COMMAND [options] [pack]

Commands:
    list       list packages
    search     search package via vimawesome.com
    install    install packages from remote repos
    remove     remove packages 
    start      move packages to start
    opt        move packages to opt
    helptags   generate helptags for all packages
Examples:
    vpack search ale                        :search plugin ale
    vpack install w0rp/ale --nvim           :install ale for neovim
    vpack list                              :list installed plugins
    vpack opt ale                           :move ale to opt
    cat plugs.txt | xargs -l vpack install  :install from file
    vpack remove $(vpack list | fzf)
    vpack install $(vpack search ale | fzf)

''')

def vimescape(s):
    """
    Escape filename for the shell.
    """
    if os.name == "nt":
        return '"' + s.replace("\\\\", "/") + '"'
    else:
        return s.replace(" ", r"\ ")

def helptags():
    for a in os.listdir(packstartdir):
        docdir=os.path.join(packstartdir, a, 'doc')
        os.system('%s -nEs -c "silent! helptags %s | q"' % (vimexe, vimescape(docdir)))
    for a in os.listdir(packoptdir):
        docdir=os.path.join(packoptdir, a, 'doc')
        os.system('%s -nEs -c "silent! helptags %s | q"' % (vimexe, vimescape(docdir)))

def opt(*argv):
    plug = argv[0]
    os.rename(os.path.join(packstartdir, plug), os.path.join(packoptdir, plug))

def start(*argv):
    plug = argv[0]
    os.rename(os.path.join(packoptdir, plug), os.path.join(packstartdir, plug))

def search(plug):
    url='https://vimawesome.com/api/plugins?query=%s' % plug
    try:
        req=urllib.request.Request(url, headers={"User-Agent": "Mozilla/5.0"})
        response = urllib.request.urlopen(req, timeout=10)
    except urllib.error.HTTPError as e:
        print("http error: ", e)
    j=json.loads(response.read().decode('utf-8'))
    for pl in j['plugins'][:5]:
        print(pl['github_owner']+'/'+pl['name'])
        print('\t stars:', pl['github_stars'])
        print('\t',pl['github_url'])
        print('\t',pl['short_desc'])

def escape(path):
    if os.name=='nt':
        return path.replace("\\", "\\\\")
    return path

def list(*_):
    l=len('https://github.com/')
    cwd=os.getcwd()
    if not os.path.exists(packstartdir):
        return
    print("====== start ======")
    for a in os.listdir(packstartdir):
        os.chdir(os.path.join(packstartdir,a))
        plug=os.popen('git remote get-url --push origin').read()
        print(plug.strip()[l:])

    if not os.path.exists(packoptdir):
        return
    os.chdir(packoptdir)
    print("\n====== opt ======")
    for a in os.listdir(packoptdir):
        os.chdir(os.path.join(packoptdir, a))
        plug=os.popen('git remote get-url --push origin').read()
        print(plug.strip()[l:])
    os.chdir(cwd)

def handle_file(file):
    pattern='(.*/.*)' if file.endswith('.txt') else '"pack (.*/.*)'
    plugs=[]
    if os.path.exists(file):
        with open(file, encoding='utf-8') as file:
            for line in file.readlines(): 
                m=re.match(pattern, line)
                if m:
                    plugs.append(m.group(1))
    return plugs

def install(*argv):
    parser = argparse.ArgumentParser(
            prog='vpack install',
            description='install vim plug')
    parser.add_argument('plug')    
    parser.add_argument('-b', '--branch', help='specify branch')
    args = parser.parse_args(argv)
    if not re.match('.*/.*', args.plug):
        print("SKIP %s, since it dosen't look like a plugin"%args.plug)
        exit()

    plugdir=os.path.join(packstartdir, args.plug.split('/')[1]) 
    plugdir1=os.path.join(packoptdir, args.plug.split('/')[1])
    print("Installing %s (branch %s)..." % (args.plug, args.branch if args.branch else 'default'))
    if os.path.exists(plugdir) or os.path.exists(plugdir1):
        print("%s already exists in " % args.plug, plugdir)
        exit()

    if args.branch:
        os.system('git clone --depth=1 https://github.com/%s %s --branch %s' % (args.plug, plugdir, args.branch))
    else:
        os.system('git clone --depth=1 https://github.com/%s %s' % (args.plug, plugdir))
    
def remove(plug):
    def onerror(func, path, execinfo):
        os.chmod(path, stat.S_IwRITE)
        func(path)
    if '/' in plug:
        plug=plug.split('/')[1]
    if os.path.exists(os.path.join(packstartdir, plug)):
        shutil.rmtree(os.path.join(packstartdir, plug), onerror=onerror)
        print("%s removed!" % plug)
    elif os.path.exists(os.path.join(packoptdir, plug)):
        shutil.rmtree(os.path.join(packoptdir, plug), onerror=onerror)
        print("%s removed!" % plug)
    else:
        print("%s not found!" % plug)

def main(action, *argv):
    if action in ['helptags', 'list', 'install', 'remove', 'start', 'opt', 'search']:
        globals()[action](*argv)
    else:
        helper()

if __name__=='__main__':
    if '--nvim' in sys.argv:
        if os.name=='nt':
            vimhome=os.path.join(home, 'appdata/local/nvim/')
            vimexec='nvim'
        else:
            vimhome=os.path.join(home,'.config/nvim')
            vimexec='nvim'
        packoptdir=os.path.join(vimhome, 'pack','vpack','opt')
        packstartdir=os.path.join(vimhome, 'pack','vpack','start')
        sys.argv.remove('--nvim')
    if len(sys.argv)==1:
        helper()
    else:
        main(*(sys.argv[1:]))
